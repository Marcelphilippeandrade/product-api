{
	"info": {
		"_postman_id": "ccfc1a9f-d885-4410-aa87-7dad1cc60ffc",
		"name": "Product-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2086778"
	},
	"item": [
		{
			"name": "Get Produtos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta deve conter os campos esperados\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").with.length.above(0);\r",
							"    pm.expect(jsonData).to.have.property(\"erros\").that.is.an(\"array\");\r",
							"\r",
							"    jsonData.data.forEach((produto) => {\r",
							"        pm.expect(produto).to.have.property(\"produtoIdentifier\").that.is.a(\"string\");\r",
							"        pm.expect(produto).to.have.property(\"nome\").that.is.a(\"string\");\r",
							"        pm.expect(produto).to.have.property(\"descricao\").that.is.a(\"string\");\r",
							"        pm.expect(produto).to.have.property(\"preco\").that.is.a(\"number\");\r",
							"\r",
							"        pm.expect(produto).to.have.property(\"categoria\").that.is.an(\"object\");\r",
							"        pm.expect(produto.categoria).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(produto.categoria).to.have.property(\"nome\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/produto",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produto"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Produtos-CategoriaId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta deve conter os campos esperados\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").that.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"erros\").that.is.an(\"array\");\r",
							"\r",
							"    jsonData.data.forEach((produto) => {\r",
							"        pm.expect(produto).to.be.an(\"object\");\r",
							"        pm.expect(produto).to.have.property(\"produtoIdentifier\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"nome\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"descricao\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"preco\").that.is.a('number');\r",
							"\r",
							"        pm.expect(produto).to.have.property(\"categoria\").that.is.an(\"object\");\r",
							"        pm.expect(produto.categoria).to.have.property(\"id\").that.is.a('number');\r",
							"        pm.expect(produto.categoria).to.have.property(\"nome\").that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/produto/categoria/{{categoriaId}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produto",
						"categoria",
						"{{categoriaId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Produto-Identifier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta deve conter os campos esperados\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"erros\").that.is.an(\"array\");\r",
							"\r",
							"    let data = jsonData.data;\r",
							"\r",
							"    // Se `data` não for um array, transforma em um array para padronizar os testes\r",
							"    if (!Array.isArray(data)) {\r",
							"        data = [data]; // Envolve o objeto em um array\r",
							"    }\r",
							"\r",
							"    pm.expect(data).to.be.an(\"array\").that.is.not.empty;\r",
							"\r",
							"    data.forEach((produto) => {\r",
							"        pm.expect(produto).to.be.an(\"object\");\r",
							"        pm.expect(produto).to.have.property(\"produtoIdentifier\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"nome\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"descricao\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"preco\").that.is.a('number');\r",
							"\r",
							"        pm.expect(produto).to.have.property(\"categoria\").that.is.an(\"object\");\r",
							"        pm.expect(produto.categoria).to.have.property(\"id\").that.is.a('number');\r",
							"        pm.expect(produto.categoria).to.have.property(\"nome\").that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/produto/{{produtoIdentifier}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produto",
						"{{produtoIdentifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Novo-Produto",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta deve conter os campos esperados\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 201);\r",
							"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"erros\").that.is.an(\"array\");\r",
							"\r",
							"    let produto = jsonData.data;\r",
							"\r",
							"    pm.expect(produto).to.have.property(\"produtoIdentifier\").that.is.a('string');\r",
							"    pm.expect(produto).to.have.property(\"nome\").that.is.a('string');\r",
							"    pm.expect(produto).to.have.property(\"descricao\").that.is.a('string');\r",
							"    pm.expect(produto).to.have.property(\"preco\").that.is.a('number');\r",
							"\r",
							"    pm.expect(produto).to.have.property(\"categoria\").that.is.an(\"object\");\r",
							"    pm.expect(produto.categoria).to.have.property(\"id\").that.is.a('number');\r",
							"    pm.expect(produto.categoria).to.have.property(\"nome\").that.is.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"nome\":\"MONITOR LED\",\r\n\t\"produtoIdentifier\": \"p7\",\r\n    \"descricao\": \"MONITOR\",\r\n\t\"preco\": 400,\r\n\t\"categoria\": {\r\n\t\t\"id\": 1,\r\n        \"nome\": \"Eletrônico\"\r\n\t}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/produto",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produto"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Produto-Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta deve conter os campos esperados\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"erros\").that.is.an(\"array\");\r",
							"\r",
							"    let data = jsonData.data;\r",
							"\r",
							"    // Se `data` não for um array, transforma em um array para padronizar os testes\r",
							"    if (!Array.isArray(data)) {\r",
							"        data = [data]; // Envolve o objeto em um array\r",
							"    }\r",
							"\r",
							"    pm.expect(data).to.be.an(\"array\").that.is.not.empty;\r",
							"\r",
							"    data.forEach((produto) => {\r",
							"        pm.expect(produto).to.be.an(\"object\");\r",
							"        pm.expect(produto).to.have.property(\"produtoIdentifier\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"nome\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"descricao\").that.is.a('string');\r",
							"        pm.expect(produto).to.have.property(\"preco\").that.is.a('number');\r",
							"\r",
							"        pm.expect(produto).to.have.property(\"categoria\").that.is.an(\"object\");\r",
							"        pm.expect(produto.categoria).to.have.property(\"id\").that.is.a('number');\r",
							"        pm.expect(produto.categoria).to.have.property(\"nome\").that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url_base}}/produto/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produto",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get API-Docs",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/produtos/v3/api-docs",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"produtos",
						"v3",
						"api-docs"
					]
				}
			},
			"response": []
		}
	]
}